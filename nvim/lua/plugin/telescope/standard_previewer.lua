-- _G.telescope_previewer_loaded = function()
--   local utils = require "telescope.utils"
--   local state = require "telescope.state"
--   local popup = require "plenary.popup"
--   -- find picker from the only telescope prompt existing
--   local picker = my_utils.find_picker()
--
--   --if self.previewer._title_fn() == "nonFloat Previewer" then
--   local status = state.get_status(picker.prompt_bufnr)
--   if not picker.old_preview_win then
--     picker.old_preview_win = status.preview_win
--   end
--
--   local startup = picker.old_preview_win == status.preview_win
--   if startup then
--     vim.keymap.set("n", "<C-Space>", my_actions.toggle_picker, { noremap = true, silent = true })
--     vim.keymap.set("n", "<C-a>", my_actions.toggle_previewer, { noremap = true, silent = true })
--
--     local nonfloat_preview_win
--
--     -- recalculate_layout() with no previewer extras
--     local line_count = vim.o.lines - vim.o.cmdheight
--     if vim.o.laststatus ~= 0 then
--       line_count = line_count - 1
--     end
--
--
--
--     -- spawn new window if there is only 1 window open in the current tab
--     local initial_editor_wins = my_utils.get_editor_wins()
--     if #initial_editor_wins <= 1 then
--       vim.api.nvim_buf_call(vim.api.nvim_win_get_buf(initial_editor_wins[1]), function()
--         vim.cmd("vert sbuffer")
--       end)
--     end
--     local editor_wins = my_utils.get_editor_win_info()
--
--     nonfloat_preview_win = editor_wins[#editor_wins].winnr
--     -- save editor buf to temporarily switch to preview
--     picker.previewer.state.last_editor_buf = vim.api.nvim_win_get_buf(nonfloat_preview_win)
--
--     picker.previewer._teardown = vim.deepcopy(picker.previewer.teardown)
--     picker.previewer.teardown = function(self)
--       -- all bufs opened by previewer are closed (apart from optionally last), switch the last editor bufnr there instead
--       vim.api.nvim_win_set_buf(nonfloat_preview_win, picker.previewer.state.last_editor_buf)
--       -- so close_windows() doesnt try and close the preview_window
--       status.preview_win = nil
--       picker.previewer._teardown(self)
--     end
--
--     local nonfloat_preview_info = editor_wins[#editor_wins]
--
--     -- clear the original autocmds created
--     vim.api.nvim_clear_autocmds {
--       group = "PickerInsert",
--       event = "BufLeave",
--       buffer = status.prompt_bufnr,
--     }
--     my_utils.merge_status({ preview_win = nonfloat_preview_win })
--     picker.preview_win = nonfloat_preview_win
--
--     -- fake picker without previewer set, so layout can calculated based on no floating previewer
--     -- local fake_picker = vim.deepcopy(my_utils.find_picker())
--     local fake_picker = setmetatable({ previewer = false }, { __index = picker })
--     local popup_opts = picker.get_window_options(fake_picker, vim.o.columns - nonfloat_preview_info.w, line_count)
--     popup.move(status.prompt_win, popup_opts.prompt)
--     popup.move(status.results_win, popup_opts.results)
--
--     -- Remove preview after the prompt and results are moved
--     vim.defer_fn(function()
--
--       -- local picker = my_utils.find_picker()
--       utils.win_delete("preview_win", status.preview_win, true)
--       utils.win_delete("preview_win", status.preview_border_win, true)
--       if vim.api.nvim_buf_is_valid(picker.previewer.state.bufnr) then
--         vim.api.nvim_win_set_buf(nonfloat_preview_win, picker.previewer.state.bufnr)
--       end
--     end, 0)
--
--   end
--   --my_utils.merge_status({ preview_win = nonfloat_preview_win })
-- end
--

-- vim.cmd([[autocmd User TelescopePreviewerLoaded lua _G.telescope_previewer_loaded()]])
