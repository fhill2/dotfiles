[color]
  ui = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green

[alias]
  # dbalatero aliases below here
  # add
  a = add                           # add

  # via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # amend your last commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
  m = checkout master

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  done = !git fetch origin $(git main-branch):$(git main-branch) && git checkout $(git main-branch)

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # pull
  pl = pull                         # pull

  # push
  ps = push -u                         # push
  p = push -u --force-with-lease
  please = push -u --force-with-lease

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # fetch a remote branch
  rbranch = !git fetch origin +$1:origin/$1
  co-origin = !git checkout -b $1 origin/$1

  # Quick sync (non-interactive mode)
  qsync = !git fetch origin $(git main-branch):$(git main-branch) && git rebase --no-keep-empty $(git main-branch)

  # interactive sync your current branch with master
  sync = !git fetch origin $(git main-branch):$(git main-branch) && git rebase --no-keep-empty -i $(git main-branch)

  take-master = !git checkout --ours $1 && git add $1 && git status

  # respond to PR feedback
  respond = !git commit --amend --no-edit && git push --force-with-lease

  # fix your branch when it's missing upstream
  upstream = !git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD) $(git rev-parse --abbrev-ref HEAD)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # discards all files in the git working directory that have only permission changes
  # https://gist.github.com/jtdp/5443498
	fix-perm = "!git diff -p --no-ext-diff --no-color --diff-filter=d | grep -E \"^(diff|old mode|new mode)\" | sed -e \"s/^old/NEW/;s/^new/old/;s/^NEW/new/\" | git apply"

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[mergetool]
  prompt = false

[merge]
  summary = true
  verbosity = 1
  tool = mvimdiff
	conflictstyle = diff3

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = current
	autoSetupRemote = true

[pull]
  # fast-forwards only
  ff = only

[core]
  attributesfile = ~/.gitattributes
  autocrlf = false
  editor = nvim
  excludesfile = ~/.gitignore
  pager = diff-so-fancy | less --tabs=4 -RFX
	commitGraph = true
	precomposeUnicode = true
	fsmonitor = true

[advice]
  statusHints = false

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = patience

[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true

[include]
  # includes these files in your home directory
  path = .gitconfig.user
  path = .gitconfig.private

[interactive]
  singlekey = true

[commit]
  template = ~/.gitmessage

[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[gc]
	writecommitGraph = true
[feature]
	manyFiles = 1
[work "pr"]
	auto-copy-url-to-clipboard = false
[help]
	autocorrect = 0
[work "features"]
	gh = true
[init]
	defaultBranch = main
[github]
	user = fhill2
[user]
	name = Freddie Hill
	email = freddiehill000@gmail.com
