# When using a display manager, these environment variables might not be loaded, as the login shell can be skipped, and the window manager is run instead.
# When using startx/initx (current setup), login shell is always executed
#
# note ~/.profile is only run when entering a sh login shell, or a bash login shell without any user bash init files existing in the home folder (.bash_profile)
# zsh doesn't ever run ~/.profile, it only runs ~/.zprofile
# when setting environment variables here, the systemd user environment is not updated with these changes


os=$(uname -s)
if [ "$os" = "Darwin" ]; then
  # Add the Homebrew path to PATH
  export PATH="/opt/homebrew/sbin:/opt/homebrew/bin:$PATH"
fi

PATH="$HOME/.local/share/nvim/mason/bin:$PATH"
PATH="/usr/sbin:$PATH"
PATH="$HOME/.duckdb/cli/latest:$PATH"


PATH="$HOME/.local/bin:$PATH"

if [ -d "$HOME/.cargo" ]; then
  PATH="$HOME/.cargo/bin:$PATH"
  . "$HOME/.cargo/env"

fi

# https://unix.stackexchange.com/a/132117
# Note: DO NOT add this to zshrc / bashrc
# If the ssh-agent is started in an rc file, ssh-agent has to be started manually when remoting over SSH
# SSH_AUTH_SOCK env var is required so all ssh-agents use the same instance across all terminals running on the system
# This makes the ssh private keys available when remoting over SSH
export SSH_AUTH_SOCK=~/.ssh/ssh-agent.$HOSTNAME.sock
ssh-add -l 2>/dev/null >/dev/null
if [ $? -ge 2 ]; then
  ssh-agent -a "$SSH_AUTH_SOCK" >/dev/null
  ssh-add ~/.ssh/f_github
fi
