#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/shared.sh"

if is_macos; then
  if dotfiles_config_set "no-mac-apps"; then
    dotsay "@b@blue[[Skipping Mac app store, no-mac-apps set]]"
  else
    require_installer package-manager

    installer_download() {
      local url=$1
      local filename=$2
      local output_path="/tmp/${filename}"

      curl -L "$url" -o "$output_path"

      echo $output_path
      return 0
    }

    mount_dmg() {
      local dmg_path=$1
      local mount_path=$(
	(yes | hdiutil attach -noautoopen "$dmg_path") | \
	  grep 'Volumes' |
	  awk '{ n=split($0, a, /[[:space:]]{2,}/); print a[n] }'
      )

      echo "$mount_path"
      return 0
    }

    unmount_dmg() {
      hdiutil detach "$1" >/dev/null
    }

    app_installed() {
      test -e "/Applications/$1.app"
    }

    run_program_and_wait() {
      local installer_path=$1
      open -W "$installer_path"
    }

    run_installer_pkg() {
      local pkg_path=$1
      sudo installer -pkg "$pkg_path" -target /
    }

    downloading_msg() {
      dotsay "@b@blue[[+ Downloading and installing $1]]"
    }

    already_installed_msg() {
      dotsay "+ $name already installed"
    }

    install_dmg_with_installer() {
      local name=$1
      local url=$2
      local installer_path=$3

      if ! app_installed "$name"; then
        dotsay "@blue@b[[+ Installing $name]]"

        downloading_msg "$name"

        local dmg_path=$(installer_download "$url" "$name.dmg")
        local mount_path=$(mount_dmg "$dmg_path")

        run_program_and_wait "$mount_path/$installer_path"

        unmount_dmg "$mount_path"
        rm -fr $dmg_path
      else
        already_installed_msg "$name"
      fi
    }

    install_simple_dmg_copy() {
      local name=$1
      local url=$2

      if ! app_installed "$name"; then
        dotsay "@blue@b[[+ Installing $name]]"

        local dmg_path=$(installer_download "$url" "$name.dmg")
        local mount_path=$(mount_dmg "$dmg_path")
        local app_to_copy="$mount_path/$name.app"

        cp -r "$app_to_copy" /Applications

        unmount_dmg "$mount_path"
        rm -fr $dmg_path
      else
        already_installed_msg "$name"
      fi
    }

    install_zip_installer() {
      local name=$1
      local installer=$2
      local url=$3

      if ! app_installed "$name"; then
        dotsay "@blue@b[[+ Installing $name]]"

        local zip_path=$(installer_download "$url" "$name.zip")
        unzip -d /tmp "$zip_path"
        open "/tmp/$installer"
      else
        already_installed_msg "$name"
      fi
    }

    install_simple_zip() {
      local name=$1
      local url=$2

      if ! app_installed "$name"; then
        dotsay "@blue@b[[+ Installing $name]]"

        local zip_path=$(installer_download "$url" "$name.zip")

        unzip -d /Applications "$zip_path"

        rm -fr $zip_path
      else
        already_installed_msg "$name"
      fi
    }

    install_inception_zip() {
      local name=$1
      local url=$2

      if ! app_installed "$name"; then
        dotsay "@blue@b[[+ Installing $name]]"

        local zip_path=$(installer_download "$url" "$name.zip")
        local tmp_directory=$(mktemp -d -t 'dotfiles')

        unzip -d "$tmp_directory" "$zip_path" >/dev/null

        dmg_path=$(
        find -E "$tmp_directory" \
          -not -path '*/\.*' \
          -iregex "\/[[:alpha:][:digit:]]+.*\.dmg$"
        )

        local mount_path=$(mount_dmg "$dmg_path")
        local app_to_copy="$mount_path/$name.app"

        cp -r "$app_to_copy" /Applications

        unmount_dmg "$mount_path"

        rm -fr $zip_path
        rm -fr $tmp_directory
      else
        already_installed_msg "$name"
      fi
    }

    install_pkg() {
      local name=$1
      local url=$2

      if ! app_installed "$name"; then
        local pkg_path=$(installer_download "$url" "$name.pkg")

        run_installer_pkg "$pkg_path"
        rm -fr $pkg_path
      else
        already_installed_msg "$name"
      fi
    }

    # install_1password() {
    #   local url="https://app-updates.agilebits.com/download/OPM7"
    #   install_pkg "1Password 7" "$url"
    # }

    # install_alfred() {
    #   local url="https://cachefly.alfredapp.com/Alfred_3.8.4_968.dmg"
    #   install_simple_dmg_copy "Alfred 3" "$url"
    # }

    # install_bartender() {
    #   local url="https://www.macbartender.com/Demo/Bartender%203.zip"
    #   install_simple_zip "Bartender 3" "$url"
    # }

    # install_better_touch_tool() {
    #   local url="https://www.boastr.net/releases/BetterTouchTool.zip"
    #   install_simple_zip "BetterTouchTool" "$url"
    # }

    # install_dash() {
    #   local url="https://sanfrancisco.kapeli.com/downloads/v4/Dash.zip"
    #   install_simple_zip "Dash" "$url"
    # }

    # install_dropbox() {
    #   local url="https://www.dropbox.com/download?plat=mac"
    #   install_dmg_with_installer "Dropbox" "$url" "Dropbox.app"
    # }

    # install_firefox() {
    #   local url="https://download.mozilla.org/?product=firefox-latest-ssl&os=osx&lang=en-US"
    #   install_simple_dmg_copy "Firefox" "$url"
    # }

    # install_focus() {
    #   local url="https://heyfocus.com/releases/Focus-latest.zip"
    #   install_simple_zip "Focus" "$url"
    # }

    # install_google_chrome() {
    #   local url="https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg"
    #   install_simple_dmg_copy "Google Chrome" "$url"
    # }

    # install_licecap() {
    #   local url="https://www.cockos.com/licecap/licecap125.dmg"
    #   install_simple_dmg_copy "LICEcap" "$url"
    # }

    # install_lunar() {
    #   local url="https://lunar.fyi/download/latest"
    #   install_simple_dmg_copy Lunar "$url"
    # }

    # install_on_the_job() {
    #   local url="http://stuntsoftware.com/downloads/OnTheJob.zip"
    #   install_simple_zip "On The Job" "$url"
    # }

    # setup_on_the_job_dropbox_sync() {
    #   local synced_dir="$HOME/Dropbox/On The Job 3"
    #   local support_dir="$HOME/Library/Application Support/On The Job 3"

    #   if [ ! -d $HOME/Dropbox ]; then
    #     dotsay "@b@red[[ERROR Dropbox needs to be setup to finish configuring On The Job]]"
    #     return 1
    #   fi

    #   if [ ! -d "$synced_dir" ]; then
    #     dotsay "@b@red[[ERROR the OTJ Dropbox dir needs to be synced to finish configuring On The Job]]"
    #     return 1
    #   fi

    #   if [[ ! -L "$support_dir" ]]; then
    #     dotsay "@b@blue[[Synced On the Job with Dropbox]]"
    #     ln -sf "$synced_dir" "$support_dir"
    #   fi
    # }

    # install_openemu() {
    #   local url="https://github.com/OpenEmu/OpenEmu/releases/download/v2.0.5/OpenEmu_2.0.5.zip"
    #   install_simple_zip "OpenEmu" "$url"
    # }

    # install_signal() {
    #   local url="https://updates.signal.org/desktop/signal-desktop-mac-1.27.4.dmg"
    #   install_simple_dmg_copy "Signal" "$url"
    # }

    # install_splice() {
    #   local url="https://s3-us-west-1.amazonaws.com/splicedesktop/install/stable/Splice.dmg"
    #   install_dmg_with_installer "Splice" "$url" "Splice Installer.app"
    # }

    # install_spotify() {
    #   local url="https://download.scdn.co/SpotifyInstaller.zip"

    #   install_zip_installer "Spotify" "Install Spotify.app" "$url"
    # }

    # install_steam() {
    #   local url="https://steamcdn-a.akamaihd.net/client/installer/steam.dmg"
    #   install_simple_dmg_copy "Steam" "$url"
    # }

    # install_swinsian() {
    #   local url="https://swinsian.com/sparkle/Swinsian.zip"
    #   install_simple_zip "Swinsian" "$url"
    # }

    # install_vlc() {
    #   local url="https://mirrors.syringanetworks.net/videolan/vlc/3.0.8/macosx/vlc-3.0.8.dmg"
    #   install_simple_dmg_copy "VLC" "$url"
    # }

    # install_zooom2() {
    #   local name="Zooom2"
    #   local path="$HOME/Dropbox/Mac Software/Zooom2.app"

    #   if ! app_installed "$name"; then
    #     if [ ! -e "$path" ]; then
    #       dotsay "@b@red[[ERROR installing $name at $path - mount and sync Dropbox and try again]]"
    #     else
    #       cp -r "$path" /Applications
    #     fi
    #   else
    #     already_installed_msg "$name"
    #   fi
    # }

    # install_aerial_screensavers() {
    #   brew_cask_install aerial
    # }

    # install_hazeover() {
    #   local url="https://hazeover.com/HazeOver.dmg"
    #   install_simple_dmg_copy "HazeOver" "$url"
    # }

    dotheader "Setting up custom Mac apps"

    # install_1password
    # install_aerial_screensavers
    # install_alfred
    # install_bartender
    # install_better_touch_tool
    # install_dash
    # install_dropbox
    # install_firefox
    # install_focus
    # install_google_chrome
    # install_hazeover
    # install_licecap
    # install_on_the_job
    # setup_on_the_job_dropbox_sync
    # install_openemu
    # install_signal
    # install_splice
    # install_spotify
    # install_steam
    # install_swinsian
    # install_vlc
    # install_zooom2
  fi
fi
