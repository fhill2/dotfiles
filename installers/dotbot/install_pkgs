#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ./pacman.bash

# install host specific pacman packages
# HOST_PKGS="${HOSTNAME}_pacman_pkgs"
# HOST_PKGS=${HOST_PKGS//-/_}

function install_yay() {
# ================ YAY =================
# by default, cargo reinstalls packages if they are already installed (with --noconfirm). 
# with --needed, packages that are allready installed are ignored
install_yay_pm() {
  local array=("$@")
  # -v -> grep in reverse, do not show anything that matches filter
  yay -S --needed "${array[@]}" 2>&1
}

echo "[YAY] trying to install all packages with --needed..."
# run code based on hostname
if [ "$HOSTNAME" = "arch-lap" ]; then
  install_yay_pm "${shared_arch_lap_pkgs[@]}"
elif [ "$HOSTNAME" = "arch-desk" ]; then
install_yay_pm "${shared_arch_desk_pkgs[@]}"
else
    echo "Unknown hostname - please manually edit this script"
fi

install_yay_pm "${shared_pacman_pkgs[@]}"
}


function install_npm() {
# ================ NPM =================
# by default, npm reinstalls packages if they are already installed
source "$SCRIPT_DIR/npm.bash"
readarray -t npm_installed_pkgs < <(npm list -g --depth=0 --json=true | jq -r '.dependencies | keys[]')

npm_pkgs_to_install=()

# Loop through the elements of array1
for item in "${npm_pkgs[@]}"; do
    # Check if the current element is not in array2
    if [[ ! " ${npm_installed_pkgs[*]} " =~ " ${item} " ]]; then
        # Print the current element (if it's not a duplicate)
        npm_pkgs_to_install+=("$item")
    fi
done

echo "${npm_pkgs_to_install[*]}"
 [ -z "${npm_pkgs_to_install[*]}" ] && echo "[NPM] all packages are installed" || echo "[NPM] installing packages: ${npm_pkgs_to_install[*]}"
}

function install_cargo() {
# ================ CARGO =================
# by default, cargo updates packages if they are already installed
source "$SCRIPT_DIR/cargo.bash"

readarray -t cargo_installed_pkgs < <(jq -r '.installs | keys[]' "$HOME/.cargo/.crates2.json" | cut -d " " -f1)

cargo_pkgs_to_install=()

# Loop through the elements of array1
for item in "${cargo_pkgs[@]}"; do
    # Check if the current element is not in array2
    if [[ ! " ${cargo_installed_pkgs[*]} " =~ " ${item} " ]]; then
        # Print the current element (if it's not a duplicate)
        cargo_pkgs_to_install+=("$item")
    fi
done
[ -z "${cargo_pkgs_to_install[*]}" ] && echo "[CARGO] all packages are installed" || echo "[CARGO] installing packages: ${cargo_pkgs_to_install[*]}"
}

function install_pip() {
# ================ PIP =================
# by default, pip does not reinstall packages if they are installed,
source "$SCRIPT_DIR/pip.bash"
echo "[PIP] trying to install all packages..."
pip install --user ${pip_pkgs[*]} | grep -v "Requirement already satisfied" | grep -v "Defaulting to user installation because normal site-packages is not writeable"
}

case "$1" in
  "yay")
    install_yay
    ;;

  "npm")
    install_npm
    ;;

  "cargo")
    install_cargo
    ;;
  "pip")
    install_pip
    ;;
  *)
    install_yay
    install_npm
    install_cargo
    install_pip
    ;;
esac
